name: Windows Manual

on:
   workflow_dispatch:
    inputs:
        build_type:
          description: 'Enter either Release or Debug'
          default: 'Release'
          required: true
          type: string
        arch:
            description: 'Enter either x64 or Arm64'
            default: 'x64'
            required: true
            type: string

jobs:
  build:
    runs-on: windows-latest

    defaults:
      run:
        shell: cmd

    env:
      ARTIFACT: QGroundControl-installer.exe
      QT_VERSION: 6.6.3
      GST_VERSION: 1.22.12
      SCCACHE_GHA_ENABLED: "true"
      BuildType: ${{ fromJSON('["Debug", "Release"]')[ inputs.build_type == 'Release' ] }}
      Arch: ${{ fromJSON('["x64", "Arm64"]')[ inputs.arch == 'Arm64' ] }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-tags: true
          fetch-depth: 0

      - uses: seanmiddleditch/gha-setup-ninja@v5
      - uses: lukka/get-cmake@latest

      - name: Install GStreamer
        uses: blinemedical/setup-gstreamer@v1
        with:
          version: ${{ env.GST_VERSION }}

      # - name: Install Gstreamer
      #   run: choco install --no-progress gstreamer gstreamer-devel --version=${{ env.GST_VERSION }}

      # - name: Set Up sccache
      #   uses: mozilla-actions/sccache-action@v0.0.5

      - name: Set Up Cache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ runner.os }}-${{ env.Arch }}-${{ env.BuildType }}
          restore-keys: ${{ runner.os }}-${{ env.Arch }}-${{ env.BuildType }}
          max-size: 1G
          append-timestamp: false
          variant: sccache
          save: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}

      - name: Install Qt for Windows (x64)
        if: env.Arch == 'x64'
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          aqtversion: ==3.1.*
          host: windows
          target: desktop
          arch: win64_msvc2019_64
          dir: ${{ runner.temp }}
          modules: qtcharts qtlocation qtpositioning qtspeech qt5compat qtmultimedia qtserialport qtimageformats qtshadertools qtconnectivity qtquick3d qtsensors
          cache: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}

      - name: Install Qt for Windows (Arm64)
        if: env.Arch == 'Arm64'
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          aqtversion: ==3.1.*
          host: windows
          target: desktop
          arch: win64_msvc2019_arm64
          dir: ${{ runner.temp }}
          extra: --autodesktop
          modules: qtcharts qtlocation qtpositioning qtspeech qt5compat qtmultimedia qtserialport qtimageformats qtshadertools qtconnectivity qtquick3d qtsensors
          cache: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}

      - name: Set up Visual Studio shell
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - run: mkdir ${{ runner.temp }}\shadow_build_dir

      - name: Configure
        working-directory: ${{ runner.temp }}\shadow_build_dir
        run: ${{ env.QT_ROOT_DIR }}/bin/qt-cmake -S ${{ github.workspace }} -B . -G Ninja ^
              -DCMAKE_BUILD_TYPE=${{ env.BuildType }} ^
              -DQGC_STABLE_BUILD=${{ github.ref_type == 'tag' || contains(github.ref, 'Stable') && 'ON' || 'OFF' }}

      - name: Build
        working-directory: ${{ runner.temp }}\shadow_build_dir
        run: cmake --build . --target all --config ${{ env.BuildType }}

      - name: Install
        working-directory: ${{ runner.temp }}\shadow_build_dir
        run: cmake --install . --config ${{ env.BuildType }}

      - name: Upload Build File
        if: env.BuildType == 'Release'
        uses: ./.github/actions/upload
        with:
          artifact_name: ${{ env.ARTIFACT }}
          source: ''
          github_token: ${{ secrets.GITHUB_TOKEN }}
